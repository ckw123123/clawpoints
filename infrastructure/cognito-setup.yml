AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cognito User Pool for Membership Points App'

Resources:
  # Cognito User Pool
  MembershipUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: membership-points-users
      UsernameAttributes:
        - username
      UsernameConfiguration:
        CaseSensitive: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: false
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
      AutoVerifiedAttributes: []
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      Schema:
        - Name: name
          AttributeDataType: String
          Required: true
          Mutable: true
        - Name: gender
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: birthdate
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: phone_number
          AttributeDataType: String
          Required: false
          Mutable: true
        - Name: email
          AttributeDataType: String
          Required: false
          Mutable: true

  # User Pool Client
  MembershipUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref MembershipUserPool
      ClientName: membership-points-client
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO

  # Admin Group
  AdminGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref MembershipUserPool
      GroupName: admin
      Description: Admin users with full access
      Precedence: 1

  # Identity Pool
  MembershipIdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      IdentityPoolName: membership_points_identity_pool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders:
        - ClientId: !Ref MembershipUserPoolClient
          ProviderName: !GetAtt MembershipUserPool.ProviderName

  # IAM Roles for Identity Pool
  CognitoAuthenticatedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref MembershipIdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthenticatedPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-sync:*
                  - cognito-identity:*
                Resource: '*'
              - Effect: Allow
                Action:
                  - execute-api:Invoke
                Resource: '*'

  # Identity Pool Role Attachment
  IdentityPoolRoleAttachment:
    Type: AWS::Cognito::IdentityPoolRoleAttachment
    Properties:
      IdentityPoolId: !Ref MembershipIdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthenticatedRole.Arn

Outputs:
  UserPoolId:
    Description: 'User Pool ID'
    Value: !Ref MembershipUserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: 'User Pool Client ID'
    Value: !Ref MembershipUserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  IdentityPoolId:
    Description: 'Identity Pool ID'
    Value: !Ref MembershipIdentityPool
    Export:
      Name: !Sub '${AWS::StackName}-IdentityPoolId'